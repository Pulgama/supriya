#! /usr/bin/env python
from __future__ import print_function
import doctest
import fcntl
import os
import struct
import supriya
import sys
import termios
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO


class RedirectedStreams(object):

    ### INITIALIZER ###

    def __init__(self, stdout=None, stderr=None):
        self._stdout = stdout or sys.stdout
        self._stderr = stderr or sys.stderr

    ### SPECIAL METHODS ###

    def __enter__(self):
        self.old_stdout, self.old_stderr = sys.stdout, sys.stderr
        self.old_stdout.flush()
        self.old_stderr.flush()
        sys.stdout, sys.stderr = self._stdout, self._stderr
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self._stdout.flush()
        self._stderr.flush()
        sys.stdout = self.old_stdout
        sys.stderr = self.old_stderr

    ### PUBLIC PROPERTIES ###

    @property
    def stderr(self):
        return self._stderr

    @property
    def stdout(self):
        return self._stdout


def _get_terminal_size():
    fd = 1
    height, width = struct.unpack(
        'hh', 
        fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'),
        )
    return height, width


def _collect_file_paths():
    file_paths = []
    for root_directory, directory_names, file_names in os.walk(
        supriya.__path__[0]):
        directory_names[:] = [x for x in directory_names
            if not x.startswith((
                '.',
                '__',
                'test',
                'documentation',
                ))]
        for file_name in file_names:
            if not file_name.endswith('.py'):
                continue
            elif file_name.startswith(('test', '__', '.')):
                continue
            file_path = os.path.join(root_directory, file_name)
            file_paths.append(file_path)
    return file_paths


def _run_doctests():
    terminal_height, terminal_width = _get_terminal_size()
    string = ' doctest session starts '
    string = string.center(terminal_width, '=')
    print(string)
    colors = {
        'BLUE': '\033[94m',
        'RED': '\033[91m',
        'GREEN': '\033[92m',
        'END': '\033[0m',
        }
    total_failures = 0
    total_modules = 0
    total_tests = 0
    failed_file_paths = []
    error_messages = []
    optionflags = (
        doctest.NORMALIZE_WHITESPACE |
        doctest.ELLIPSIS
        )
    for file_path in _collect_file_paths():
        total_modules += 1
        relative_path = os.path.relpath(file_path)
        string_buffer = StringIO()
        with RedirectedStreams(stdout=string_buffer, stderr=string_buffer):
            failure_count, test_count = doctest.testfile(
                file_path,
                module_relative=False,
                optionflags=optionflags,
                )
        if failure_count:
            failed_file_paths.append(os.path.relpath(file_path))
            error_messages.append(string_buffer.getvalue())
            result_code = ''.join((
                colors['RED'],
                'FAILED',
                colors['END'],
                ))
            print(relative_path, result_code)
        else:
            result_code = ''.join((
                colors['BLUE'],
                'OK',
                colors['END'],
                ))
            print(relative_path, result_code)
        total_failures += failure_count
        total_tests += test_count
    if failed_file_paths:
        print()
        for error_message in error_messages:
            print(error_message)
    for file_path in failed_file_paths:
        string = 'FAILED: {}'.format(file_path)
        print(string)
    total_successes = total_tests - total_failures
    print()
    test_identifier = 'test(s)'
    module_identifier = 'module(s)'
    string = ' {} of {} {} passed in {} {} '
    string = string.format(
        total_successes,
        total_tests,
        test_identifier,
        total_modules,
        module_identifier,
        )
    string = string.center(terminal_width, '=')
    success = total_successes == total_tests
    if success:
        string = '{color}{string}{end}'.format(
            color=colors['GREEN'],
            string=string,
            end=colors['END'],
            )
        print(string)
        sys.exit(0)
    else:
        string = '{color}{string}{end}'.format(
            color=colors['RED'],
            string=string,
            end=colors['END'],
            )
        print(string)
        sys.exit(1)


if __name__ == '__main__':
    _run_doctests()

