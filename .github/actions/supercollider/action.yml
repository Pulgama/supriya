name: Install SuperCollider
description: Install SuperCollider
inputs:
  branch:
    description: SuperCollider branch
    required: false
    default: develop
  origin:
    description: SuperCollider repo origin
    required: false
    default: https://github.com/supercollider/supercollider.git
runs:
  using: "composite"
  steps:
    - name: Cache current date
      id: current-date
      run: echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT
      shell: bash
    - name: Clone SuperCollider
      run: |
        git clone --quiet --recursive --branch ${{ inputs.branch }} ${{ inputs.origin }} /tmp/supercollider
        cd /tmp/supercollider
        echo "SC_COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "SC_ORIGIN_MD5=$(echo ${{inputs.origin}} | md5sum | head -c 7)" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "SC_ORIGIN_MD5=$(echo ${{inputs.origin}} | md5 | head -c 7)" >> $GITHUB_ENV
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi
      shell: bash
    - name: '[macOS] Cache Homebrew'
      id: cache-homebrew
      if: runner.os == 'macOS'
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/Homebrew/downloads
        key: homebrew-${{ runner.os }}-${{ steps.current-date.outputs.stamp }}
        restore-keys: homebrew-${{ runner.os }}-
    - name: '[macOS] Cleanup Homebrew'
      if: runner.os == 'macOS' && !steps.cache-homebrew.outputs.cache-hit
      run: rm -rf $(brew --cache)
      shell: bash
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}
        restore-keys: ${{ runner.os }}
    - name: Setup ccache path
      run: |
        echo "/usr/lib/ccache" >> $GITHUB_PATH
        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
      shell: bash
    - name: '[Linux] Install dependencies'
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install --yes \
          build-essential \
          cmake \
          emacs \
          jackd2 \
          libasound2-dev \
          libavahi-client-dev \
          libfftw3-dev \
          libicu-dev \
          libjack-jackd2-dev \
          libreadline6-dev \
          libsndfile1-dev \
          libudev-dev \
          libxt-dev \
          pkg-config
      shell: bash
    - name: '[macOS] Install dependencies'
      if: runner.os == 'macOS'
      run: |
        brew install \
          fftw \
          jack \
          portaudio
      shell: bash
    - name: '[Linux] Configure'
      if: runner.os == 'Linux'
      run: |
        mkdir /tmp/supercollider/build
        cd /tmp/supercollider/build
        cmake \
          -DSC_ED=OFF \
          -DSC_EL=OFF \
          -DSC_IDE=OFF \
          -DSC_VIM=OFF \
          -DSC_QT=OFF \
          -DSUPERNOVA=ON \
          ..
      shell: bash
    - name: '[macOS] Configure'
      if: runner.os == 'macOS'
      run: |
        mkdir /tmp/supercollider/build
        cd /tmp/supercollider/build
        cmake \
          -DCMAKE_PREFIX_PATH=`brew --prefix qt5` \
          -DRULE_LAUNCH_COMPILE=ccache \
          -DSC_CODESIGN_AFTER_DEPLOY=OFF \
          -DSC_DISABLE_XCODE_CODESIGNING=ON \
          -DSC_ED=OFF \
          -DSC_EL=OFF \
          -DSC_IDE=OFF \
          -DSC_QT=OFF \
          -DSC_VIM=OFF \
          -DSUPERNOVA=ON \
          -G Xcode \
          ..
      shell: bash
    - name: '[Linux] Build'
      if: runner.os == 'Linux'
      run: |
        cd /tmp/supercollider/build
        make -j2
      shell: bash
    - name: '[macOS] Build'
      if: runner.os == 'macOS'
      run: cmake --build /tmp/supercollider/build --config Release --target install
      shell: bash
    - name: '[Linux] Install'
      if: runner.os == 'Linux'
      run: |
        cd /tmp/supercollider/build
        sudo make install -j2
        mkdir -p /home/runner/.local/share/SuperCollider/synthdefs
      shell: bash
    - name: '[macOS] Install'
      if: runner.os == 'macOS'
      run: |
        echo "/tmp/supercollider/build/Install/SuperCollider/SuperCollider.app/Contents/MacOS" >> $GITHUB_PATH
        echo "/tmp/supercollider/build/Install/SuperCollider/SuperCollider.app/Contents/Resources" >> $GITHUB_PATH
        mkdir -p "/Users/runner/Library/Application Support/SuperCollider/synthdefs"
      shell: bash
    - name: Debug ccache
      run: ccache --show-stats --show-config
      shell: bash
    - name: Setup Jack
      run: |
        echo "Setting up Jack..."
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo usermod -a -G audio ${USER}
        fi
        sleep 1
        sudo -E su ${USER} -c "jackd -r -ddummy -r44100 -p1024" &
        sleep 1
      shell: bash
    - name: Sanity-check scsynth
      run: |
        echo "Sanity-checking scsynth..."
        scsynth -v
        scsynth -h || true
        sudo -E su ${USER} -c "scsynth -D 0 -H default\:snchk -R 0 -u 57110" &
        sleep 5
        killall scsynth
      shell: bash
    - name: Sanity-check supernova
      run: |
        echo "Sanity-checking supernova..."
        supernova -v
        supernova -h || true
        sudo -E su ${USER} -c "supernova -D 0 -H default\:snchk -R 0 -u 57110" &
        sleep 5
        killall supernova
      shell: bash
