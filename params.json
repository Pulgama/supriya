{"name":"Supriya","tagline":"A Python interface to SuperCollider","body":"supriya\r\n=======\r\n\r\nA Python interface to SuperCollider.\r\n\r\nTested and compatible with Python 2.7, 3.3 and 3.4.\r\n\r\n![SynthDef Graph](/graph.png)\r\n\r\nInstallation\r\n------------\r\n\r\nTo install, simply clone **supriya** and run the included `setup.py`:\r\n\r\n    ~$ git clone https://github.com/Pulgama/supriya.git\r\n    ~$ cd supriya\r\n    supriya$ sudo python setup.py install\r\n\r\nTo run the test suite:\r\n\r\n    supriya$ tox \r\n\r\nDependencies\r\n------------\r\n\r\nMake sure that SuperCollider is installed, and that `scsynth` is available from\r\nthe command-line.\r\n\r\nPython dependencies for all Python versions:\r\n\r\n- abjad\r\n- pexpect\r\n- pytest\r\n- rtmidi-python\r\n- sphinx\r\n- tox\r\n\r\nOn Python 2.7:\r\n\r\n- funcsigs\r\n- enum34\r\n\r\nOn Python 3.3:\r\n\r\n- enum34\r\n\r\nExample\r\n-------\r\n\r\nImport packages from **supriya**:\r\n\r\n    >>> from supriya import servertools\r\n    >>> from supriya import synthdeftools\r\n    >>> from supriya import ugentools\r\n\r\nBoot the SuperCollider server:\r\n\r\n    >>> server = servertools.Server()\r\n    >>> server.boot()\r\n    <Server: udp://127.0.0.1:57751, 8i8o>\r\n\r\nCreate and allocate a group:\r\n\r\n    >>> group = servertools.Group().allocate()\r\n\r\nMake a synthesizer definition and send it to the server:\r\n\r\n    >>> synthdef_builder = synthdeftools.SynthDefBuilder(\r\n    ...     amplitude=0.0,\r\n    ...     frequency=440.0,\r\n    ...     )\r\n    >>> sin_osc = ugentools.SinOsc.ar(\r\n    ...     frequency=synthdef_builder['frequency'],\r\n    ...     )\r\n    >>> sin_osc *= synthdef_builder['amplitude']\r\n    >>> out = ugentools.Out.ar(\r\n    ...     bus=(0, 1),\r\n    ...     source=sin_osc,\r\n    ...     )\r\n    >>> synthdef_builder.add_ugen(out)\r\n    >>> synthdef = synthdef_builder.build().allocate(sync=True)\r\n\r\nSynchronize with the server:\r\n\r\n    >>> server.sync()\r\n    <Server: udp://127.0.0.1:57751, 8i8o>\r\n\r\nCreate a synthesizer with the previously defined synthesizer definition, and\r\nallocate it on the server as a child of the previously created group:\r\n\r\n    >>> synth = servertools.Synth(synthdef)\r\n    >>> synth.allocate(target_node=group)\r\n    <Synth: 1001>\r\n\r\nQuery the server's node tree:\r\n\r\n    >>> response = server.query_remote_nodes(include_controls=True)\r\n    >>> print(response)\r\n    NODE TREE 0 group\r\n        1 group\r\n            1000 group\r\n                1001 f1c3ea5063065be20688f82b415c1108\r\n                    amplitude: 0.0, frequency: 440.0\r\n\r\nQuit the server:\r\n\r\n    >>> server.quit()\r\n    <Server: offline>\r\n\r\nCurrent Roadmap\r\n---------------\r\n\r\n- [X] Cleanup server object proxies\r\n    - [X] BufferGroup, Buffer, BufferProxy\r\n    - [X] BusGroup, Bus, BusProxy (for both Audio and Control buses)\r\n    - [X] SynthControl\r\n        - [X] QueryTreeControl.from_control()\r\n- [X] Make SynthDef immutable\r\n    - [X] Implement SynthDefBuilder\r\n    - [X] Implement Parameter class (model a single control name, value, rate)\r\n    - [X] Implement AudioControl and TrigControl UGens\r\n- [ ] Explicitly object model Server requests\r\n- [ ] Implement complete Buffer API\r\n    - [ ] `/b_alloc`\r\n    - [ ] `/b_allocRead`, `/b_allocReadChannel`\r\n    - [ ] `/b_read`, `/b_readChannel`\r\n    - [ ] `/b_write`, `/b_close`\r\n    - [ ] `/b_get`, `/b_getn`\r\n    - [ ] `/b_set`, `/b_setn`\r\n    - [ ] `/b_query`\r\n    - [ ] `/b_gen`, `/b_fill`, `/b_zero`\r\n    - [ ] `/b_free`\r\n- [ ] Implement complete Bus(-related) API\r\n    - [ ] `/c_set`, `/c_setn`\r\n    - [ ] `/c_fill`\r\n    - [ ] `/c_get`, `/c_getn`\r\n    - [ ] `/n_map`, `/n_mapn`\r\n    - [ ] `/n_mapa`, `/n_mapan`\r\n- [ ] Implement all UGen binary operators\r\n- [ ] Implement all UGen unary operators\r\n- [ ] MIDI callbacks\r\n- [ ] Port all UGens\r\n    - [X] AudioIn.sc\r\n    - [ ] BasicOpsUGen.sc\r\n    - [ ] BEQSuite.sc\r\n    - [ ] BufIO.sc\r\n    - [ ] Chaos.sc\r\n    - [ ] CheckBadValues.sc\r\n    - [ ] Compander.sc\r\n    - [X] Delays.sc\r\n    - [ ] DelayWr.sc\r\n    - [ ] Demand.sc\r\n    - [ ] DiskIO.sc\r\n    - [ ] EnvGen.sc\r\n    - [ ] FFT.sc\r\n    - [ ] Filter.sc\r\n    - [ ] FreeVerb.sc\r\n    - [ ] FSinOsc.sc\r\n    - [ ] Gendyn.sc\r\n    - [ ] GrainUGens.sc\r\n    - [ ] GVerb.sc\r\n    - [ ] Hilbert.sc\r\n    - [X] InfoUGens.sc\r\n    - [ ] InOut.sc\r\n    - [ ] Line.sc\r\n    - [ ] MachineListening.sc\r\n    - [ ] MacUGens.sc\r\n    - [ ] Mix.sc\r\n    - [ ] MoogFF.sc\r\n    - [ ] Noise.sc\r\n    - [ ] Osc.sc\r\n    - [ ] Pan.sc\r\n    - [ ] PhysicalModel.sc\r\n    - [X] PitchShift.sc\r\n    - [ ] Pluck.sc\r\n    - [ ] Poll.sc\r\n    - [ ] PSinGraph.sc\r\n    - [ ] Splay.sc\r\n    - [ ] Trig.sc\r\n    - [ ] UGen.sc\r\n- [ ] Implement appropriate UGen input checking\r\n- [ ] Port all UGen examples\r\n- [ ] Write SynthDef compilation/sending tests to scsynth for all UGens\r\n- [ ] Implement tempo-accurate clocks and scheduled OSCBundle logic\r\n\r\nDistant Roadmap\r\n---------------\r\n\r\n- [ ] PySide-based GUI generation\r\n- [ ] Kivy-based GUI generation\r\n- [ ] Non-realtime composition\r\n    - [ ] NRTScore\r\n    - [ ] NRT node graph time slicing?","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}