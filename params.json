{"name":"Supriya","tagline":"A Python interface to SuperCollider","body":"supriya\r\n=======\r\n\r\nA Python interface to SuperCollider.\r\n\r\nSupriya lets you:\r\n\r\n-   boot and communicate with SuperCollider's `scsynth` synthesis server\r\n-   construct and compile `SynthDef` unit generator graphs in native Python code\r\n-   build and control graphs of synthesizers and synthesizer groups\r\n-   object-model `scysnth` OSC communications explicitly via `Request` and\r\n    `Response` classes\r\n-   schedule synthesizer events and patterns\r\n\r\nDocumentation is available at http://supriya.readthedocs.org/en/latest/.\r\n\r\nPlease note: this project is still under **heavy** development, is **not** yet\r\nstable, and is **not** yet intended for deployment in the field.\r\n\r\nSend compliments or complaints to josiah.oberholtzer@gmail.com, or register\r\nan issue at https://github.com/Pulgama/supriya/issues.\r\n\r\nCompatible with Python 2.7, 3.3 and 3.4.\r\n\r\nBasta.\r\n\r\n![SynthDef Graph](/graph.png)\r\n\r\nInstallation\r\n------------\r\n\r\nTo install, simply clone **supriya** and run the included `setup.py`:\r\n\r\n    ~$ git clone https://github.com/Pulgama/supriya.git\r\n    ~$ cd supriya\r\n    supriya$ sudo python setup.py install\r\n\r\nTo run the test suite:\r\n\r\n    supriya$ tox \r\n\r\nDependencies\r\n------------\r\n\r\nMake sure that SuperCollider is installed, and that `scsynth` is available from\r\nthe command-line. **supriya** targets SuperCollider 3.6.5 and above, although\r\nit may work with earlier versions as well.\r\n\r\n    ~$ scsynth -h\r\n    supercollider_synth  options:\r\n    ...\r\n\r\nSuperCollider may be found at http://supercollider.sourceforge.net/ for all\r\nplatforms. Alternatively, many Linux distributions will allow you to install\r\nSuperCollider via their package manager.\r\n\r\n**supriya** has the following Python dependencies for all Python versions:\r\n\r\n- `abjad`\r\n- `numpy`\r\n- `pexpect`\r\n- `pytest`\r\n- `rtmidi-python`\r\n- `sphinx_rtd_theme`\r\n- `sphinx`\r\n- `tox`\r\n- `wavefile`\r\n\r\nAdditionally, **supriya** requires `funcsigs` with Python 2.7, and `enum34` for\r\nboth Python 2.7 and Python 3.3.\r\n\r\n`python-wavefile` requires that `libsndfile` be installed. Source for\r\n`libsndfile` for OSX platforms may be found at\r\nhttp://www.mega-nerd.com/libsndfile/#Download.\r\n\r\nWhen installed via the included `setup.py` file (`sudo python setup.py\r\ninstall`) all of the above dependencies will be installed automatically.\r\n\r\n**supriya** has not been tested with Python 3.x versions earlier than 3.3.\r\n\r\nExample\r\n-------\r\n\r\nImport packages from **supriya**:\r\n\r\n    >>> from supriya import servertools\r\n    >>> from supriya import synthdeftools\r\n    >>> from supriya import ugentools\r\n\r\nBoot the SuperCollider server:\r\n\r\n    >>> server = servertools.Server()\r\n    >>> server.boot()\r\n    <Server: udp://127.0.0.1:57751, 8i8o>\r\n\r\nCreate and allocate a group:\r\n\r\n    >>> group = servertools.Group().allocate()\r\n\r\nMake a synthesizer definition and send it to the server:\r\n\r\n    >>> synthdef_builder = synthdeftools.SynthDefBuilder(\r\n    ...     amplitude=0.0,\r\n    ...     frequency=440.0,\r\n    ...     )\r\n    >>> sin_osc = ugentools.SinOsc.ar(\r\n    ...     frequency=synthdef_builder['frequency'],\r\n    ...     )\r\n    >>> sin_osc *= synthdef_builder['amplitude']\r\n    >>> out = ugentools.Out.ar(\r\n    ...     bus=(0, 1),\r\n    ...     source=sin_osc,\r\n    ...     )\r\n    >>> synthdef_builder.add_ugen(out)\r\n    >>> synthdef = synthdef_builder.build().allocate(sync=True)\r\n\r\nSynchronize with the server:\r\n\r\n    >>> server.sync()\r\n    <Server: udp://127.0.0.1:57751, 8i8o>\r\n\r\nCreate a synthesizer with the previously defined synthesizer definition, and\r\nallocate it on the server as a child of the previously created group:\r\n\r\n    >>> synth = servertools.Synth(synthdef)\r\n    >>> synth.allocate(target_node=group)\r\n    <Synth: 1001>\r\n\r\nQuery the server's node tree:\r\n\r\n    >>> response = server.query_remote_nodes(include_controls=True)\r\n    >>> print(response)\r\n    NODE TREE 0 group\r\n        1 group\r\n            1000 group\r\n                1001 f1c3ea5063065be20688f82b415c1108\r\n                    amplitude: 0.0, frequency: 440.0\r\n\r\nQuit the server:\r\n\r\n    >>> server.quit()\r\n    <Server: offline>","google":"UA-56256911-2","note":"Don't delete this file! It's used internally to help with page regeneration."}